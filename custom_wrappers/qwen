#!/usr/bin/env python3

import shutil
import re
import sys
import os
from pathlib import Path

# Add the src directory to the Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from aicache.core import Cache
from aicache.plugins.base import CLIWrapper as BaseCLIWrapper # Import BaseCLIWrapper
import asyncio

class CustomCLIWrapper:
    def __init__(self):
        self.cli_name = "qwen"
        self.real_cli_path = "/Users/allansmeyatsky/.nvm/versions/node/v22.17.0/bin/qwen"
        self.prompt_regex = r".* (.*)"
        self.model_arg = "--model" if "--model" != "None" else None

    def get_cli_name(self) -> str:
        return self.cli_name

    def parse_arguments(self, args: list) -> tuple[str, dict]:
        prompt_content = ""
        model = None

        # Extract prompt using regex
        args_str = " ".join(args)
        match = re.search(self.prompt_regex, args_str)
        if match:
            prompt_content = match.group(1)

        # Extract model if model_arg is provided
        if self.model_arg:
            i = 0
            while i < len(args):
                if args[i] == self.model_arg:
                    if i + 1 < len(args):
                        model = args[i+1]
                        break
                    else:
                        i += 1
                else:
                    i += 1

        context = {'model': model}
        return prompt_content, context

    async def execute_cli(self, args: list) -> tuple[str, int, str]:
        if not shutil.which(self.real_cli_path):
            return "", 1, f"Error: {self.real_cli_path} executable not found."

        # Use the _run_cli_command_async from the BaseCLIWrapper
        base_wrapper_instance = BaseCLIWrapper()
        return await base_wrapper_instance._run_cli_command_async(self.real_cli_path, args)

# Main execution logic for the generated wrapper
async def generated_wrapper_main():
    wrapper = CustomCLIWrapper()
    args = sys.argv[1:]

    prompt_content, context = wrapper.parse_arguments(args)

    cache = Cache()
    await cache.init_async()
    cached_response = await cache.get(prompt_content, context)

    if cached_response:
        print("--- (aicache HIT) ---", file=sys.stderr)
        print(cached_response["response"])
        sys.exit(0)
    else:
        print("--- (aicache MISS) ---", file=sys.stderr)
        stdout, return_code, stderr = await wrapper.execute_cli(args)
        if return_code == 0:
            await cache.set(prompt_content, stdout, context)
            print(stdout)
        if stderr:
            print(stderr, file=sys.stderr)
        sys.exit(return_code)

if __name__ == "__main__":
    asyncio.run(generated_wrapper_main())
